#ifndef QTRESTCLIENT_QMLGENERICRESTREPLY_H
#define QTRESTCLIENT_QMLGENERICRESTREPLY_H

#include <QtCore/QObject>

#include <QtQml/QJSValue>
#include <QtQml/QJSEngine>

#include <QtJsonSerializer/SerializerBase>

#include <QtRestClient/RestReply>

#ifdef DOXYGEN_RUN
namespace de::skycoder42::QtRestClient {

/*! @brief The QML version of ::QtRestClient::GenericRestReply
 *
 * @extends QtQml.QtObject
 * @since 2.0
 *
 * This is a special version that is only used by classes generated by qrestbuilder
 */
class GenericRestReply
#else
namespace QtRestClient {

class QmlGenericRestReply : public QObject
#endif
{
	Q_OBJECT

	/*! @brief The original ::QtRestClient::RestReply that this one wrapps
	 *
	 * @default{<i>auto</i>}
	 * @accessors{
	 *	@memberAc{reply}
	 *  @readonlyAc
	 * }
	 * @sa ::QtRestClient::RestReply
	 */
	Q_PROPERTY(QtRestClient::RestReply *reply MEMBER _reply CONSTANT)
	/*! @brief The primary reply type returned by this request
	 *
	 * @default{<i>auto</i>}
	 * @accessors{
	 *	@memberAc{returnType}
	 *  @readonlyAc
	 * }
	 */
	Q_PROPERTY(QString returnType READ returnType CONSTANT)
	/*! @brief The error reply type returned by this request
	 *
	 * @default{<i>auto</i>}
	 * @accessors{
	 *	@memberAc{errorType}
	 *  @readonlyAc
	 * }
	 */
	Q_PROPERTY(QString errorType READ errorType CONSTANT)

public:
	//! @private
	Q_INVOKABLE QmlGenericRestReply(QtJsonSerializer::SerializerBase *serializer,
									QJSEngine *engine,
									int returnType,
									int errorType,
									QtRestClient::RestReply *reply);

	//! @private
	QString returnType() const;
	//! @private
	QString errorType() const;

public Q_SLOTS:
	/*! @brief Add a method to be called when the request has been completed
	 *
	 * @param completedHandler a JS callback to be called with the reply
	 *
	 * The handlers arguments are:
	 * - The HTTP-Status code (int)
	 */
	void addCompletedHandler(const QJSValue &completedHandler);
	/*! @brief Add a method to be called when the request has been completed successfully
	 *
	 * @param succeededHandler a JS callback to be called with the reply
	 *
	 * The handlers arguments are:
	 * - The HTTP-Status code (int)
	 * - The deserialized Content of the reply (returnType)
	 */
	void addSucceededHandler(const QJSValue &succeededHandler);
	/*! @brief Add a method to be called if the request has failed
	 *
	 * @param failedHandler a JS callback to be called with the reply
	 *
	 * The handlers arguments are:
	 * - The HTTP-Status code (int)
	 * - The deserialized Content of the reply (errorType)
	 */
	void addFailedHandler(const QJSValue &failedHandler);
	/*! @brief Add a method to be called if an error occured
	 *
	 * @param errorHandler a JS callback to be called with the reply
	 *
	 * The handlers arguments are:
	 * - The error string (string)
	 * - The error code (int)
	 * - The error type (::QtRestClient::RestReply::ErrorType)
	 */
	void addErrorHandler(const QJSValue &errorHandler);

private:
	QtJsonSerializer::SerializerBase *_serializer;
	QJSEngine *_engine;
	int _returnType;
	int _errorType;
	RestReply* _reply;

	bool checkOk(const QJSValue &fn) const;
};

}

Q_DECLARE_METATYPE(QtRestClient::QmlGenericRestReply*)

#endif // QTRESTCLIENT_QMLGENERICRESTREPLY_H
