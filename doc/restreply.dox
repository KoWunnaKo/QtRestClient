/*!
@class QtRestClient::RestReply

This class is used as base class for kinds of replies. Extending classes simply wrap it's
functionality.

# Definition of "Failure"
When using the replies, you will see a FailureError and onFailure methods. THose are **not**
network errors or json errors. A failure means that the server sent a valid reply, but with
a HTTP-Statuscode, that is not positive (2XX), the result is treated as a failure. In most
cases, those are 4XX errors, like 400 or 404. In some cases, the servers still send some kind
of JSON as a reply. Those can be retrieved as "error objects"

@sa GenericRestReply, RestClass
*/

/*!
@property QtRestClient::RestReply::autoDelete

@default{`true`}

If set to true, the reply will de deleted automatically, right after all handlers have been
called. While it is recommended to use this property, you must be aware that qeued connections
will not work if enabled. And of couse this means, that you should not access the reply outside
of the handlers after returning to the event loop once.

@accessors{
	@readAc{autoDelete()}
	@writeAc{setAutoDelete()}
	@writeAc{disableAutoDelete() <i>(indirect)</i>}
	@notifyAc{autoDeleteChanged()}
}
*/

/*!
@property QtRestClient::RestReply::allowEmptyReplies

@default{`false`}

By default, only rest replies that have the NO_CONTENT(204) HTTP status code set are allowed
to have an empty body. For all other status codes, the request will fail if the body is not
a valid JSON object or array. By setting this property to true, such replies are treated as
valid and behave as if that status code was set.

@accessors{
	@readAc{allowsEmptyReplies()}
	@writeAc{setAllowEmptyReplies()}
	@notifyAc{allowEmptyRepliesChanged()}
	@revisionAc{2}
}
*/

/*!
@property QtRestClient::RestReply::async

@default{`false`}

If a reply was marked as async, the handler the parses, deserialized and processed the received
data will not be run on the replies thread, but on a threadpool. By default, the global
threadpool QThreadPool::globalInstance() is used, but calling makeAsync() allows you to specify
your own pool.

@warning Using the reply in async mode can be dangerous. Make sure to read the "Async" section
of the README!

@accessors{
	@readAc{isAsync()}
	@writeAc{setAsync()}
	@writeAc{makeAsync() <i>(indirect)</i>}
	@notifyAc{asyncChanged()}
}

@sa QThreadPool::globalInstance, RestClient::asyncPool
*/

/*!
@fn QtRestClient::RestReply::onSucceeded(TFn&&)

@param handler The function to be called on success
@returns A reference to this reply

The handlers can have the following signatures:
- `(): any`
- `(int): any` (HTTP status code)
- `(<data>): any` (HTTP reply body)
- `(int, <data>): any` (HTTP status code, HTTP reply body)
- `(int, RestReply::DataType): any` (HTTP status code, HTTP reply body)

The `<data>` part can be any of the following:
- `<jdata>`
	- QJsonValue
	- QJsonObject
	- QJsonArray
- `<cdata>`
	- QCborValue
	- QCborMap
	- QCborArray
- `std::variant<std::nullopt_t, <cdata>, <jdata>>`
- `std::variant<<cdata>, <jdata>>`

@sa RestReply::onFailed, RestReply::onCompleted, GenericRestReply::onSucceeded
*/

/*!
@fn QtRestClient::RestReply::onSucceeded(QObject*, TFn&&)
@param scope A scope to limit the callback to
@copydetails RestReply::onSucceeded(TFn&&)
*/

/*!
@fn QtRestClient::RestReply::onFailed(TFn&&)

@param handler The function to be called on failure
@returns A reference to this reply

The handlers can have the following signatures:
- `(): any`
- `(int): any` (HTTP status code)
- `(<data>): any` (HTTP reply body)
- `(int, <data>): any` (HTTP status code, HTTP reply body)
- `(int, RestReply::DataType): any` (HTTP status code, HTTP reply body)

The `<data>` part can be any of the following:
- `<jdata>`
	- QJsonValue
	- QJsonObject
	- QJsonArray
- `<cdata>`
	- QCborValue
	- QCborMap
	- QCborArray
- `std::variant<std::nullopt_t, <cdata>, <jdata>>`
- `std::variant<<cdata>, <jdata>>`

@sa RestReply::onAllErrors, RestReply::onSucceeded, RestReply::onCompleted, GenericRestReply::onFailed
*/

/*!
@fn QtRestClient::RestReply::onFailed(QObject*, TFn&&)
@param scope A scope to limit the callback to
@copydetails RestReply::onFailed(TFn&&)
*/

/*!
@fn QtRestClient::RestReply::onCompleted(TFn&&)

@param handler The function to be called on success
@returns A reference to this reply

The handlers can have the following signatures:
- `(): any`
- `(int): any` (HTTP status code)
- `(<data>): any` (HTTP reply body)
- `(int, <data>): any` (HTTP status code, HTTP reply body)
- `(int, RestReply::DataType): any` (HTTP status code, HTTP reply body)

The `<data>` part can be any of the following:
- `<jdata>`
	- QJsonValue
	- QJsonObject
	- QJsonArray
- `<cdata>`
	- QCborValue
	- QCborMap
	- QCborArray
- `std::variant<std::nullopt_t, <cdata>, <jdata>>`
- `std::variant<<cdata>, <jdata>>`

@sa RestReply::onFailed, RestReply::onSucceeded, GenericRestReply::onCompleted
*/

/*!
@fn QtRestClient::RestReply::onCompleted(QObject*, TFn&&)
@param scope (optional) A scope to limit the callback to
@copydetails RestReply::onCompleted(TFn&&)
*/

/*!
@fn QtRestClient::RestReply::onError(std::function<void(QString, int, Error)>)

@param handler The function to be called on a network/json error
@returns A reference to this reply

The handlers arguments are:
- The error string (QString)
  - For network error: QNetworkReply::errorString
  - For json error: QJsonParseError::errorString
- The error code (int)
  - For network error: QNetworkReply::error
  - For json error: QJsonParseError::error
- The error type (RestReply::Error,
either RestReply::Error::NetworkError or RestReply::Error::ParseError)

@sa RestReply::onAllErrors, GenericRestReply::onAllErrors
*/

/*!
@fn QtRestClient::RestReply::onError(QObject*, std::function<void(QString, int, Error)>)
@param scope A scope to limit the callback to
@copydetails RestReply::onError(std::function<void(QString, int, Error)>)
*/

/*!
@fn QtRestClient::RestReply::onAllErrors(const std::function<void(QString, int, Error)>&, TFn&&)

@param handler The function to be called on any error
@param failureTransformer (optional) A function to be called to extract an error string from the failure JSON
@returns A reference to this reply

The handlers arguments are:
- The error string (QString)
  - For network error: QNetworkReply::errorString
  - For json error: QJsonParseError::errorString
  - For failure error: `failureTransformer`
- The error code (int)
  - For network error: QNetworkReply::error
  - For json error: QJsonParseError::error
  - For failure error: The HTTP-Status code
- The error type (RestReply::Error,
either RestReply::Error::NetworkError, RestReply::Error::ParseError or
RestReply::Error::FailureError)

The failureTransformer can have the following signature:
- `(<data>, int): QString` (HTTP reply body, HTTP status code)

The `<data>` part can be any of the following:
- `<jdata>`
	- QJsonValue
	- QJsonObject
	- QJsonArray
- `<cdata>`
	- QCborValue
	- QCborMap
	- QCborArray
- `std::variant<std::nullopt_t, <cdata>, <jdata>>`
- `std::variant<<cdata>, <jdata>>`

@sa RestReply::onError, RestReply::onFailed, GenericRestReply::onAllErrors
*/

/*!
@fn QtRestClient::RestReply::onAllErrors(QObject*, const std::function<void(QString, int, Error)>&, TFn&&)
@param scope A scope to limit the callback to
@copydetails RestReply::onAllErrors(const std::function<void(QString, int, Error)>&, TFn&&)
*/

/*!
@fn QtRestClient::RestReply::retry

This function simply resends the request. Internally, the network reply is exchanged with the
new one. This means after a retry the reply will not be deleted. Please not that retry will
not immediatly perform the retry, but instead wait for the request to finish, call all handlers,
and at the very end check if it should retry. This means you can safely call this method
from any handler.

@sa RestReply::abort
*/

/*!
@fn QtRestClient::RestReply::retryAfter

@param mSecs The delay, in milliseconds, to wait before retrying to send

@copydetails QtRestClient::RestReply::retry
*/
