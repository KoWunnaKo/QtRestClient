/*!
@class QtRestClient::RestClient

This one is the base class of the API. You typically create one instance of it for each API you
want to access, and then register it globally using registerGlobalApi().

The client is used by RestClass and other components, to get the basic request settings for all
requests.

@sa RestClass, QtRestClient::addGlobalApi
*/

/*!
@property QtRestClient::RestClient::dataMode

@default{`RestClient::DataMode::Json`}

The dataMode controls in which format data that is sent by the classes of this client and
received by replies must be. Data can either be in JSON or in CBOR format, but cannot be mixed.

@note Changing the dataMode will reset the internally used serializer. If you want to use a
custom serializer, only set the serializer, not the dataMode, as the mode will be derived from
the serializer.

@accessors{
	@readAc{dataMode()}
	@writeAc{setDataMode()}
	@writeAc{setSerializer() (indirectly)}
	@notifyAc{dataModeChanged()}
}

@sa RestClient::setSerializer, RestClient::DataMode
*/

/*!
@property QtRestClient::RestClient::baseUrl

@default{invalid <i>(default constructed)</i>}

All other settings regarding URLs will be based on this one.

@accessors{
	@readAc{baseUrl()}
	@writeAc{setBaseUrl()}
	@notifyAc{baseUrlChanged()}
}

@sa RequestBuilder
*/

/*!
@property QtRestClient::RestClient::apiVersion

@default{none <i>(default constructed)</i>}

The version will be directly appended to the baseUrl, if set. Trailing zeros are removed, and a
"v" will be prepended to the number. If the version is invalid, it will not be added at all.

<b>Example:</b><br/>
Assuming the baseUrl is `https://example.com`, we get the following urls:
- `{none} -> https://example.com/`
- `1.0.0 -> https://example.com/v1/`
- `0.1 -> https://example.com/v0.1/`

@accessors{
	@readAc{apiVersion()}
	@writeAc{setApiVersion()}
	@notifyAc{apiVersionChanged()}
}

@sa RequestBuilder::setVersion
*/

/*!
@property QtRestClient::RestClient::globalHeaders

@default{empty <i>(default constructed)</i>}

Those headers are added for example to the HTTP-Requests as additional HTTP headers. Can be
overwritten by the RestClass doing the request.

@accessors{
	@readAc{globalHeaders()}
	@writeAc{setGlobalHeaders()}
	@writeAc{addGlobalHeader() <i>(indirectly)</i>}
	@writeAc{removeGlobalHeader() <i>(indirectly)</i>}
	@notifyAc{globalHeadersChanged()}
}

@sa QNetworkRequest::setRawHeader, QNetworkRequest::KnownHeaders, RequestBuilder::addHeaders,
RestClass
*/

/*!
@property QtRestClient::RestClient::globalParameters

@default{empty <i>(default constructed)</i>}

Can be overwritten by the RestClass doing the request.

@accessors{
	@readAc{globalParameters()}
	@writeAc{setGlobalParameters()}
	@writeAc{addGlobalParameter() <i>(indirectly)</i>}
	@writeAc{removeGlobalParameter() <i>(indirectly)</i>}
	@notifyAc{globalParametersChanged()}
}

@sa QUrl::setQuery(const QUrlQuery &), RequestBuilder::addParameters, RestClass
*/

/*!
@property QtRestClient::RestClient::requestAttributes

@default{empty <i>(default constructed)</i>}

Can be overwritten by the RestClass doing the request. To use the recommended ones, call
setModernAttributes()

@accessors{
	@readAc{requestAttributes()}
	@writeAc{setRequestAttributes()}
	@writeAc{addRequestAttribute() <i>(indirectly)</i>}
	@writeAc{removeRequestAttribute() <i>(indirectly)</i>}
	@notifyAc{requestAttributesChanged()}
}

@sa RestClient::setModernAttributes, QNetworkRequest::setAttribute,
RequestBuilder::setAttributes
*/

/*!
@property QtRestClient::RestClient::threaded

@default{`false`}

By default, the restclient can only be accessed from the thread it was created in. By setting
this property to true, it can be accessed globally from any thread.

@warning Please read the @ref multithreading section of the @ref index "README" before using the restclient in a threaded context.

@accessors{
	@readAc{isThreaded()}
	@writeAc{setThreaded()}
	@notifyAc{threadedChanged()}
}

@sa RestClient::asyncPool, RequestBuilder::sendAsync
*/

/*!
@property QtRestClient::RestClient::sslConfiguration

@default{QSslConfiguration::defaultConfiguration()}

Can be overwritten by the RestClass doing the request. If you modify the applications default
configuration after creating the rest client, those changes will **not** be applied to the
existing client.

@accessors{
	@readAc{sslConfiguration()}
	@writeAc{setSslConfiguration()}
	@notifyAc{sslConfigurationChanged()}
}

@sa QSslConfiguration::setDefaultConfiguration, RequestBuilder::setSslConfig
*/

/*!
@property QtRestClient::RestClient::asyncPool

@default{`nullptr`}

By setting this property to any valid QThreadPool, all RestReply instances created by any
RestClass that belongs to this client instance will have the RestReply::async property set to
`true` and use this threadpool for their execution.

@note This property implies RestClient::threaded and will automatically change it to `true`
when set to a non nullptr value.

@warning Please read the @ref multithreading section of the @ref index "README" before using the restclient in a threaded context.

@accessors{
	@readAc{asyncPool()}
	@writeAc{setAsyncPool()}
	@notifyAc{asyncPoolChanged()}
}

@sa RestClient::threaded, RestReply::async
*/

/*!
@fn QtRestClient::RestClient::createClass

@param path The path to be appended to the base path
@param parent The parent for the created rest class
@returns A newly created RestClass for the given path

The path will be appended to one created by the client. Please not that for all requests the
request will be recreated. If you change any property of the RestClient, this will affect all
RestClass instances that have been created by this client.

The following example shows how this affects the RestClass:
@code{.cpp}
//client is configured as
client->setBaseUrl("https://api.example.com/default/");
client->addGlobalParameter("id", "42");

//class was created using
auto rClass = client->createClass("stuff/important", this);

//doing the following request
rClass->get<MyType>("test");
//will make a request to the URL: https://api.example.com/default/stuff/important/test?id=42

//after modifying the client and doing it again
client->setApiVersion(QVersionNumber(1));
rClass->get<MyType>("test");
//the URL becomes: https://api.example.com/default/v1/stuff/important/test?id=42
@endcode

@sa RestClient::rootClass, QtRestClient::createApiClass
*/

/*!
@fn QtRestClient::RestClient::rootClass

@returns The root class of this client

The root class is an instance of a RestClass, created with no extra path, parented to the client.
You can use it to make requests, but you do not own it. You can create an equivalent copy of this
instance, owned by you, by calling:

@code{.cpp}
auto myRootClass = client->createClass(QString(), this);
@endcode

@sa RestClient::createClass, QtRestClient::apiRootClass
*/

/*!
@fn QtRestClient::RestClient::manager

@returns The network access manager used by the client

@sa RestClient::setManager
*/

/*!
@fn QtRestClient::RestClient::serializer

@returns The json serializer used by the client

@sa RestClient::setSerializer, https://skycoder42.github.io/QJsonSerializer
*/

/*!
@fn QtRestClient::RestClient::pagingFactory

@returns The paging factory used by the client

@sa RestClient::setPagingFactory, IPaging, Paging
*/

/*!
@fn QtRestClient::RestClient::builder

@returns A request builder, prepared with all the settings of the rest client

If you need to set additional properties on the builder, that are not provided by the rest client
itself, you can override this function. To preserve all the properties override as follows:

@code{.cpp}
RequestBuilder MyClient::builder() const override {
	return RestClient::builder()
		.set...
}
@endcode

@sa RestClass::builder
*/

/*!
@fn QtRestClient::RestClient::setManager

@param manager The network access manager to be used by the client

The client will take ownership of the manager. You must not delete it after setting it. All
RestClass instances, requests, replies and more will use this new manager.

@sa RestClient::manager
*/

/*!
@fn QtRestClient::RestClient::setSerializer

@param serializer The json serializer to be used by the client

The client will take ownership of the serializer. You must not delete it after setting it. All
RestClass instances, requests, replies and more will use this new serializer.

@sa RestClient::serializer, https://skycoder42.github.io/QJsonSerializer
*/

/*!
@fn QtRestClient::RestClient::setPagingFactory

@param factory The paging factory to be used by the client

The client will take ownership of the factory. You must not delete it after setting it. All
RestClass instances, requests, replies and more will use this new factory.

@sa RestClient::pagingFactory, IPaging, Paging, PagingFactory
*/

/*!
@fn QtRestClient::RestClient::setModernAttributes

The following attributes will be set on the client

Attribute										| Value
------------------------------------------------|--------
QNetworkRequest::FollowRedirectsAttribute		| `true`
QNetworkRequest::HttpPipeliningAllowedAttribute	| `true`
QNetworkRequest::SpdyAllowedAttribute			| `true`
QNetworkRequest::HTTP2AllowedAttribute			| `true`

@note While it is recommended to use these attributes, they may not all work for every backend.
Older servers, for example, may have problems with HTTP2 requests, and will fail to even reply.
In such cases, you can still use these attributes, and simply overwrite the problematic one again:

@code{.cpp}
client->setModernAttributes()
client->addRequestAttribute(QNetworkRequest::HTTP2AllowedAttribute, false);
@endcode

@sa RestClient::requestAttributes, QNetworkRequest::Attribute
*/
