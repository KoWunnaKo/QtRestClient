/*!
@class QtRestClient::Paging

@tparam T The type the paging object is wrapping

The paging class is a container class that allows you to access generic paging mechanisms.

Typically, APIs use paging as a method to reduce the size of replies. Instead of returning a
complete list of elements, only a small chunck (i.e. 10 Elements) is returned, wrapped into a
paging object. The object itself containes links, indexes and more to make it possible to
iterate over them, by sending multiple consecutive requests.

While most of these paging objects are very similar, they can have different structures. The
Paging class, in combination with the IPaging interface, allows you to access any paging
mechanism in an easy manner.

@note All links in paging objects will be resolved relative to the clients URL. For absolute
URLs, this means only stuff like headers or additional query parameters are added. Relative
URLs however must be relative to the clients URL. If thats not the case, you can extend the
private class StandardPaging to adjust the URLs, or implement your own IPaging.

@sa Paging::iterate, IPaging, PagingFactory
*/

/*!
@fn QtRestClient::Paging::next

@returns A generic reply, for the sent request, or `nullptr`, if no next element exists

The returned reply is owned by the caller. You can use it just like any other normal reply,
created by a RestClass
*/

/*!
@fn QtRestClient::Paging::previous

@returns A generic reply, for the sent request, or `nullptr`, if no previous element exists

The returned reply is owned by the caller. You can use it just like any other normal reply,
created by a RestClass
*/

/*!
@fn QtRestClient::Paging::iterate(const std::function<bool(T, qint64)>&, qint64, qint64) const

@param iterator The iterator to be be called for every element iterated over
@param to The upper limit of how far the iteration should go (-1 means no limit)
@param from The lower limit from where the iteration should start

The paging object will iterate over all it's elements and then automatically call next(),
and perform an iteration on the result of that reply as well. This continues until no next
element is available anymore or the iterator returns `false` to cancel early.

By setting `to`, you can specify a limit. As soon as the iteration reaches the element with an
index that equals the limit, the iteration is canceled. The element at the `to` index will
**not** be passed to the iterator.

By setting `from`, you can specify an offset. The iteration will skip all elements, until the
index reaches the offset. The element with the `from` index is the **first** to be passed to
the iterator. Please note, that `from` must not be smaller then Paging::offset. If thats the
case, this function will assert.

@note Not all pagings support indexes. In that case, `to` and `from` will have no effect.

The iterators parameters are:
- One element of the deserialized Content of the paging replies (DataClassType)
- The index of the current element or -1 if not supported (int)
- _returns:_ `true` if the iteration should continue, `false` to cancel it prematurely
*/

/*!
@fn QtRestClient::Paging::iterate(QObject *, const std::function<bool(T, qint64)>&, qint64, qint64) const
@param scope A scope to limit the callback to
@copydetails Paging::iterate(const std::function<bool(T, qint64)>&, qint64, qint64) const
*/

/*!
@fn QtRestClient::Paging::iterate(const std::function<bool(T, qint64)> &, const std::function<void(QString, int, RestReply::Error)> &, const std::function<QString(EO, int)>&, qint64, qint64) const

@tparam EO The type of the negative result
@param errorHandler Will be passed to GenericRestReply::onAllErrors for all replies
@param failureTransformer Will be passed to GenericRestReply::onAllErrors for all replies

@copydetails QtRestClient::Paging::iterate(const std::function<bool(T, qint64)>&, qint64, qint64) const
*/

/*!
@fn QtRestClient::Paging::iterate(QObject *, const std::function<bool(T, qint64)> &, const std::function<void(QString, int, RestReply::Error)> &, const std::function<QString(EO, int)>&, qint64, qint64) const
@param scope A scope to limit the callback to
@copydetails Paging::iterate(const std::function<bool(T, qint64)> &, const std::function<void(QString, int, RestReply::Error)> &, const std::function<QString(EO, int)>&, qint64, qint64) const
*/

/*!
@fn QtRestClient::Paging::iterate(const std::function<bool(T, qint64)>&, const std::function<void(int, EO)>&, const std::function<void(QString, int, RestReply::Error)>&, const std::function<void(QtJsonSerializer::Exception &)>&, qint64, qint64) const

@tparam EO The type of the negative result
@param failureHandler Will be passed to GenericRestReply::onFailed for all replies
@param errorHandler Will be passed to GenericRestReply::onError for all replies
@param exceptionHandler Will be passed to GenericRestReply::onSerializeException for all replies

@copydetails QtRestClient::Paging::iterate(const std::function<bool(T, qint64)>&, qint64, qint64) const
*/

/*!
@fn QtRestClient::Paging::iterate(QObject *, const std::function<bool(T, qint64)>&, const std::function<void(int, EO)>&, const std::function<void(QString, int, RestReply::Error)>&, const std::function<void(QtJsonSerializer::Exception &)>&, qint64, qint64) const
@param scope A scope to limit the callback to
@copydetails Paging::iterate(const std::function<bool(T, qint64)>&, const std::function<void(int, EO)>&, const std::function<void(QString, int, RestReply::Error)>&, const std::function<void(QtJsonSerializer::Exception &)>&, qint64, qint64) const
*/
