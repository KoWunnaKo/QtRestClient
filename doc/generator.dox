/*!
@page generator The QRestBuilder Tool

@brief The documentation for the qrestbuilder tool

@tableofcontents

@section generator_features What it does
The `qrestbuilder` reads in a xml file, and generates a header and a source from it. Those will, depending on the input, contain either
an "object", "gadget", "class" or "api". This allows an easy and fast creation of wrappers for any REST-API.
In order to use the tool as custom compiler, ou can simply create the XML files and add the to the pro file using
@code{.pro}
REST_API_FILES += # your xml files
@endcode

@section generator_start Getting Started
The easiest way to get started is to check out the JsonPlaceholderApi example. It will teach you the general system behind the generator.
You can then study this documentation to see, what you can do with it.

@section generator_doc File Syntax documentation
The following sections show a detailed documentation of what you can do with the tool, and explain the syntax of the xml files.
You can check the following locations for some sample files:
- [README.md](@ref index)
- `example/JsonPlaceholderApi`
- `tests/auto/restclient/RestBuilderTest`

There are also W3C XML Schema definitions available, see `tools/qrestbuilder/restclient.xsd` (TODO also attached to the end of this page).
Please note that while in the XSD sequences are used, generally the order of elements in the xml files can be whatever you want it to be.
The only elements where the order actually has any effect are the `<Path>/<PathParam>` elements of the `<Method>` element - but this is
specified in more detail in their documentation.

Your document must start with one of the following 4 root elements:
- `<RestObject>` - will generate an api object based on QObject
- `<RestGadget>` - will generate an api object based on Q_GADGET
- `<RestClass>` - will generate an api subclass
- `<RestApi>` - will generate the api root class<br/>

An object is simply a "data type" class. It will be generated with a bunch of properties (Q_PROPERTY), and methods to access them. They are
generated in an optimized way, an can be used by the rest client as data classes. It allows a simple, fast and easy creation of those objects.
You can generate them in two ways: As a Q_GADGET or a QObject. The gadget has the advantage of beeing a value type and using shared data, but
on the other side does not really allow inheritance and does not support change signals or dynamic properties, which the QObject classes do.

A class is a wrapper around QtRestClient::RestClass, that encapsulates the rather generic methods into custom methods with adjusted parameters etc.
This creates a c++ class, with simple methods to do HTTP-Request. In addition to that, you can build hieracical trees with classes, and those are
represented by methods in the classes, allowing you to follow that tree in c++ as well. For the "root-class", you can use the api version, which
allows you to specify the basic properties of a QtRestClient::RestClient.

@subsection generator_doc_RestObject Element Type: RestObject (and RestGadget)
The RestObject and RestGadget elements are of the same datatype and thus support the same attributes and children. The only difference is
how the final c++ code is beeing generated.

@subsubsection generator_doc_RestObject_attribs Attributes
 Name				| Allowed values		| Default/Required						| Description
--------------------|-----------------------|---------------------------------------|-------------
 name				| c++ class name		| <i>required</i>						| The class name of the generated class
 export				| string				| <i>none</i>							| Sepcify an export macro. The value is put before the class definition, if you want to export the generated classes from a dynamic library
 base				| name of a base class	| "QObject" for objects, "" for gadgets	| If you need a custom base class, use this property
 registerConverters	| bool					| true									| If true, automatically registers the list converters for this type
 testEquality		| bool					| true									| Setter methods check if the value did actually change before assigning it.<br/>This can fail if a used type does not have equality operators.
 generateEquals		| bool					| true for `RestGadget`, else false		| If enabled, default-generated equality operators are added
 generateReset		| bool					| true									| If enabled, reset methods are generated for all properties

@subsubsection generator_doc_RestObject_children Allowed Child Elements
 Name		| XML-Type									| Limits	| Description
------------|-------------------------------------------|-----------|-------------
 Include	| @ref generator_doc_Include "Include"		| 0 - ∞		| Additional header files to be included in the generated header
 Enum		| @ref generator_doc_Enum "Enum"			| 0 - ∞		| Custom enums to be created as part of the generated class
 Property	| @ref generator_doc_BaseParam "BaseParam"	| 1 - ∞		| The actual properties the class is composed of



@subsection generator_doc_RestClass Element Type: RestClass
This class is an extension of @ref generator_doc_RestAccess "RestAccess". This means all the attributes and allowed child
elements of RestAccess can/must also be used for a RestClass, include the additional attributes and child elements defined here.

The rest class is a sub class that is a part of a greater api.

@subsubsection generator_doc_RestClass_children Allowed Child Elements
 Name	| XML-Type										| Limits	| Description
--------|-----------------------------------------------|-----------|-------------
 Path	| @ref generator_doc_Expression "Expression"	| 0 - 1		| The sub-path of this class, relative to it's parent class/api (QString)



@subsection generator_doc_RestApi Element Type: RestApi
This class is an extension of @ref generator_doc_RestAccess "RestAccess". This means all the attributes and allowed child
elements of RestAccess can/must also be used for a RestClass, include the additional attributes and child elements defined here.

The rest api is basically a root class with additional properties to create the apis root RestClient.

@subsubsection generator_doc_RestApi_attribs Attributes
 Name		| Allowed values	| Default/Required							| Description
------------|-------------------|-------------------------------------------|-------------
 globalName	| string			| <i>none</i>								| The APIs global name. If specified the api is made available globally by using QtRestClient::addGlobalApi with that name
 autoCreate	| bool				| true if `globalName` is set, else false	| <i>Requires `globalName` to be set.</i> If set to true, the API will be automatically registered on application start. If not, it happens on first use

@subsubsection generator_doc_RestApi_children Allowed Child Elements
 Name		| XML-Type										| Limits	| Description
------------|-----------------------------------------------|-----------|-------------
 BaseUrl	| @ref generator_doc_BaseUrl "BaseUrl"			| 1			| The primary base URL for the api to base all subpaths on (required)
 Parameter	| @ref generator_doc_FixedParam "FixedParam"	| 0 - ∞		| Additional URL query parameters to be added to the base URL
 Header		| @ref generator_doc_FixedParam "FixedParam"	| 0 - ∞		| Additional HTTP-Headers to be added to every HTTP request



@subsection generator_doc_RestAccess Element Type: RestAccess
This type is a virtual type that you will never use directly. Instead is serves as a base class for @ref generator_doc_RestApi "RestApi" and
@ref generator_doc_RestClass "RestClass". All the attributes and children defined here can/must be used on those two element types.

@subsubsection generator_doc_RestAccess_attribs Attributes
 Name		| Allowed values		| Default/Required	| Description
------------|-----------------------|-------------------|-------------
 name		| c++ class name		| <i>required</i>	| The class name of the generated class
 export		| string				| <i>none</i>		| Sepcify an export macro. The value is put before the class/factory definition, if you want to export the generated classes from a dynamic library
 base		| name of a base class	| "QObject"			| If you need a custom base class, use this property
 except		| c++ class name		| "Object*"			| The default value for "except" of all @ref generator_doc_Method "Method" Elementshappens on first use

@subsubsection generator_doc_RestAccess_children Allowed Child Elements
 Name		| XML-Type								| Limits	| Description
------------|---------------------------------------|-----------|-------------
 Include	| @ref generator_doc_Include "Include"	| 0 - ∞		| Additional header files to be included in the generated header
 Class		| @ref generator_doc_Class "Class"		| 0 - ∞		| The child classes to generate methods for
 Method		| @ref generator_doc_Method "Method"	| 0 - ∞		| The Actual REST-Methods to access the api within the current class



@subsection generator_doc_Include Element Type: Include
Describes a file to be included via a c++ include directive. You can use them if you want to make use of special classes in your
generated classes. Both global includes (`#include <header>`) and local includes (`#include "header"`) are supported <br/>

@subsubsection generator_doc_Include_attribs Attributes
 Name	| Allowed values	| Default/Required	| Description
--------|-------------------|-------------------|-------------
 local	| bool				| false				| Specifies whether the include is a global or a local include

@subsubsection generator_doc_Include_content Content
The content of this element must be a string. More specific the header to be included. It becomes the content
of the include directive. Specifiy it without the braces or quores, as thoes are added automatically.



@subsection generator_doc_BaseParam Element Type: BaseParam
A base param is a method parameter or a Q_PROPERTY to be added to the generated class/method.
For each such property, getters and setters are generated as well, and depending on the configuration
even notify signals and reset methods. For method parameters, it determines the name and type of the
parameter, as well as the parameters default value, if wanted.

@subsubsection generator_doc_BaseParam_attribs Attributes
 Name	| Allowed values			| Default/Required	| Description
--------|---------------------------|-------------------|-------------
 key	| property/parameter name	| <i>required</i>	| The property or parameter name
 type	| c++ type name				| <i>required</i>	| The properties/parameters type
 asStr	| bool						| false				| Specify how the element content should be interpreted

@subsubsection generator_doc_BaseParam_content Content
The content of a base param is optional, and it represents the default value of the property/parameter.
If not specified, the base param will be initialize with it's default constructor. If specified, the content
is used to initialize (and reset) the base param. How the content is interpreted depends on the `asStr` attribute.

If it is set to false (the default), the content must be c++ code and is copied to the generated class as is. The
code must be an expression that evalutes to a single value that is implicitly convertible to the given `type`. If
type was for example `int`, valid expressions could be:
- `<BaseParam>-1</BaseParam>`
- `<BaseParam>10 + 20</BaseParam>`
- `<BaseParam>qRand()</BaseParam>`

If set to true, the content is assumed to be a string. You don't need to specify quotation marks around the string.
That string is used to initialize a QVariant that is then converted to `type` - in other words, the type you use must be
variant convertible from a string. This can be used to, for example, create a `QDate` from a string with the default
value of `<BaseParam asStr="true">2018-05-09</BaseParam>`.<br/>



@subsection generator_doc_Enum Element Type: Enum
If you want to use custom enum types in you class, use this element. It allows you to generate enums and flags
that are automatically registered with Qt.

@subsubsection generator_doc_Enum_attribs Attributes
 Name		| Allowed values				| Default/Required	| Description
------------|-------------------------------|-------------------|-------------
 name		| c++ class name				| <i>required</i>	| The c++ name of the generated enum
 base		| name of a valid parent class	| <i>none</i>		| If you need a custom base class for your enum, use this property. But remember that Qt discourages this!
 isFlags	| bool							| false				| If set to true, a QFlag type is generated and registered instead of a normal enum

@subsubsection generator_doc_Enum_children Allowed Child Elements
Name	| XML-Type								| Limits	| Description
--------|---------------------------------------|-----------|-------------
Key		| @ref generator_doc_EnumKey "EnumKey"	| 1 - ∞		| The actual elements of the enum/flags to be generated



@subsection generator_doc_EnumKey Element Type: EnumKey
Describes a key/element within an enum.

@subsubsection generator_doc_EnumKey_attribs Attributes
 Name	| Allowed values	| Default/Required	| Description
--------|-------------------|-------------------|-------------
 name	| c++ enum key name	| <i>required</i>	| The name of the key, i.e. the actual enum key.

@subsubsection generator_doc_EnumKey_content Content
The content is optional. You can specify a custom value for your enum element (is placed after the = sign). The content
must be a valid c++ constexpr, i.e. code that can be evaluated at compile time and that results in a value of the base
type your enum is of (Or int, if no base type is given).



@subsection generator_doc_Expression Element Type: Expression
An expression can be any arbitrary element. It is defined as s string, that can optionally be a c++
expression that evaluates to a string instead.

@subsubsection generator_doc_Expression_attribs Attributes
 Name	| Allowed values	| Default/Required	| Description
--------|-------------------|-------------------|-------------
 expr	| bool				| false				| Specify whether a string or an expression is given.

@subsubsection generator_doc_Expression_content Content
The content is the actual string to be returned. If `expr` is false (the default), the content is
the final string (excluding the sourrounding quotation marks), for example `<Expression>42</Expression>`.
However, if it is set to true, then the content of this element is interpreted as a c++ expression. The
expression must evaluate to a single result that is implicitly convertible to either QString or QByteArray,
depending on the context it is beeing used in. A simple example for an expression would be:
`<Expression expr="true">QString::number(42)</Expression>`<br/>



@subsection generator_doc_FixedParam Element Type: FixedParam
A FixedParam is basically an @ref generator_doc_Expression "Expression" with an additional attribute, key,
to give the expression an identity. So besides that extra attribute, it behaves just like an expression.

@subsubsection generator_doc_FixedParam_attribs Attributes
 Name	| Allowed values	| Default/Required	| Description
--------|-------------------|-------------------|-------------
 key	| string			| <i>required</i>	| The name/key of the parameter you are specifying



@subsection generator_doc_Class Element Type: Class
A class element is simply a reference to another @ref generator_doc_RestClass "RestClass" to be made
avilable as subclass of the current class/api. You will have to add the class type it as include. The
type must be class generated by the tool as well. It is possible to use an api as child class as well, but it will ignore
the API-aspect, and simply interpret it as class. However, it is not recommended to do so.

@subsubsection generator_doc_Class_attribs Attributes
 Name	| Allowed values	| Default/Required	| Description
--------|-------------------|-------------------|-------------
 key	| c++ method name	| <i>required</i>	| The name of the method that returns the class
 type	| c++ class name	| <i>required</i>	| The type of the class to return by the method



@subsection generator_doc_Method Element Type: Method
The main aspect of your class are the methods. They define what can be done by your class. They define a HTTP-request, that will
be wrapped into a c++ method by the builder.

@subsubsection generator_doc_Method_attribs Attributes
 Name		| Allowed values		| Default/Required											| Description
------------|-----------------------|-----------------------------------------------------------|-------------
 name		| c++ method name		| <i>required</i>											| The name of the method to be generated
 verb		| string (HTTP verb)	| "GET"														| The HTTP-Verb to be used for the request
 body		| c++ class name		| <i>none</i>												| An optional body, to be sent with the request. Must be serializable and included
 returns	| c++ class name		| void														| The type of the reply entity. Must be serializable and included, or void
 except		| c++ class name		| @ref generator_doc_RestAccess_attribs "RestAccess.except"	| The type of a reply with an error. Must be serializable and included. Defaults to the classes except property
 postParams	| bool					| verb == "POST"											| Specify if the `<Param>` elements should be send as URL query or POST parameter.<br/>

@subsubsection generator_doc_Method_children Allowed Child Elements
Name		| XML-Type										| Limits	| Description
------------|-----------------------------------------------|-----------|-------------
 Path		| @ref generator_doc_Expression "Expression"	| 0 - ∞		| A fixed path segment to be added to the requests url path
 PathParam	| @ref generator_doc_BaseParam "BaseParam"		| 0 - ∞		| A path segment as method parameter to be added to the requests url path
 Url		| @ref generator_doc_Expression "Expression"	| 0 - 1		| A fixed URL to be resolved relative to the classes sub URL
 Param		| @ref generator_doc_BaseParam "BaseParam"		| 0 - ∞		| Additional method parameters to be used as query or past params for the request (Depending on `postParams`)
 Header		| @ref generator_doc_FixedParam "FixedParam"	| 0 - ∞		| Additional HTTP-Headers to be added to the HTTP-Request

@attention You cannot combine `<Path>/<PathParam>` with `<Url>`. Either you use a combination of `<Path>/<PathParam>` elements
to build a combine path from them, or you use a single `<Url>` to specify a whole, unparametrized URL. You can of couse specify
neither as well



@subsection generator_doc_BaseUrl Element Type: BaseUrl
A BaseUrl is basically an @ref generator_doc_Expression "Expression" with an additional attribute, apiVersion,
to give the URL an optional, C++-validated version number, which can be accessed via the RestClient.
So besides that extra attribute, it behaves just like an expression.

@subsubsection generator_doc_BaseUrl_attribs Attributes
 Name		| Allowed values		| Default/Required	| Description
------------|-----------------------|-------------------|-------------
 apiVersion	| QVersionNumber string	| <i>none</i>		| An optional API version to be appended to the base URL as extra path segment

*/
