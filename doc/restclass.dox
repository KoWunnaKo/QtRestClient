/*!
@fn QtRestClient::RestClass::callJson(QByteArray, const QString &, const QVariantHash &, const HeaderHash &, bool)

@note Not all parameters may apply to all overloads - choose the matching ones

@param verb The HTTP-Verb to be used for the request
@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param body The JSON body to be sent together with the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request
@param paramsAsBody Pass the `parameters` as POST-parameter method body instead of as a query url parametery
@returns A reply object, to handle the reply to this request

This basic version allows to perform low-level JSON calls and replies. The following table shows,
how the different path arguments can be used. The class base URL is `http://api.example.com/test`
for this example:

Parameter	| value				| requets URL
------------|-------------------|-------------
<i>none</i>	|					| `http://api.example.com/test`
methodPath	| `myPath`			| `http://api.example.com/test/myPath`
relativeUrl	| `../prod`			| `http://api.example.com/prod`

@sa RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &)
*/

/*!
@fn QtRestClient::RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &, bool)

@note Not all parameters may apply to all overloads - choose the matching ones

@tparam DT The expected type of the reply to this request. Defaults to `QObject*`
@tparam ET A type to be used for replies with an error. Defaults to `QObject*`
@tparam RO The type of the data specified with the `body` parameter

@param verb The HTTP-Verb to be used for the request
@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param body The body object to be sent together with the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request
@param paramsAsBody Pass the `parameters` as POST-parameter method body instead of as a query url parametery

@returns A generic reply object for `DT` and `ET`, to handle the reply to this request
@throw QJsonSerializationException Will be thrown, if the `body` cannot be serializer to JSON

This basic version allows to perform genric calls and replies. The following table shows,
how the different path arguments can be used. The class base URL is `http://api.example.com/test`
for this example:

Parameter	| value				| requets URL
------------|-------------------|-------------
<i>none</i>	|					| `http://api.example.com/test`
methodPath	| `myPath`			| `http://api.example.com/test/myPath`
relativeUrl	| `../prod`			| `http://api.example.com/prod`

The body type `RO` must be a serializable object type, i.e. Inherit QObject and be a pointer,
or have the Q_GADGET macro. For the list overload, simply types are allowed as well. The reason
is: whatever the result of the serialization is, it must be either a json object or a json array.

The same applies for `DT` and `ET`, for the reply.

@sa RestClass::callJson(QByteArray, const QString &, const QVariantHash &, const HeaderHash &), https://skycoder42.github.io/QJsonSerializer
*/

/*!
@fn QtRestClient::RestClass::get(const QString &, const QVariantHash &, const HeaderHash &)

@note Not all parameters may apply to all overloads - choose the matching ones

@tparam DT The expected type of the reply to this request. Defaults to `QObject*`
@tparam ET A type to be used for replies with an error. Defaults to `QObject*`

@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request

@returns A generic reply object for `DT` and `ET`, to handle the reply to this request

A wrapper that calls `call(RestClass::GetVerb, ...)`. It's a shortcut for GET-requests. Check
the documentation fo call for more details.

@sa RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &)
*/

/*!
@fn QtRestClient::RestClass::post(const QString &, const QVariantHash &, const HeaderHash &)

@note Not all parameters may apply to all overloads - choose the matching ones

@tparam DT The expected type of the reply to this request. Defaults to `QObject*`
@tparam ET A type to be used for replies with an error. Defaults to `QObject*`
@tparam RO The type of the data specified with the `body` parameter

@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param body The body object to be sent together with the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request

@returns A generic reply object for `DT` and `ET`, to handle the reply to this request
@throw QJsonSerializationException Will be thrown, if the `body` cannot be serializer to JSON

A wrapper that calls `call(RestClass::PostVerb, ...)`. It's a shortcut for POST-requests. Check
the documentation fo call for more details.

@sa RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &)
*/

/*!
@fn QtRestClient::RestClass::put(const QString &, const QVariantHash &, const HeaderHash &)

@note Not all parameters may apply to all overloads - choose the matching ones

@tparam DT The expected type of the reply to this request. Defaults to `QObject*`
@tparam ET A type to be used for replies with an error. Defaults to `QObject*`
@tparam RO The type of the data specified with the `body` parameter

@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param body The body object to be sent together with the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request

@returns A generic reply object for `DT` and `ET`, to handle the reply to this request
@throw QJsonSerializationException Will be thrown, if the `body` cannot be serializer to JSON

A wrapper that calls `call(RestClass::PutVerb, ...)`. It's a shortcut for PUT-requests. Check
the documentation fo call for more details.

@sa RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &)
*/

/*!
@fn QtRestClient::RestClass::deleteResource(const QString &, const QVariantHash &, const HeaderHash &)

@note Not all parameters may apply to all overloads - choose the matching ones

@tparam DT The expected type of the reply to this request. Defaults to `QObject*`
@tparam ET A type to be used for replies with an error. Defaults to `QObject*`

@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request

@returns A generic reply object for `DT` and `ET`, to handle the reply to this request

A wrapper that calls `call(RestClass::DeleteVerb, ...)`. It's a shortcut for DELETE-requests. Check
the documentation fo call for more details.

@sa RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &)
*/

/*!
@fn QtRestClient::RestClass::patch(const QString &, const QVariantHash &, const HeaderHash &)

@note Not all parameters may apply to all overloads - choose the matching ones

@tparam DT The expected type of the reply to this request. Defaults to `QObject*`
@tparam ET A type to be used for replies with an error. Defaults to `QObject*`
@tparam RO The type of the data specified with the `body` parameter

@param methodPath The path to added to the classes base URL
@param relativeUrl A URL to be resolved relative to the classes base URL, use as URl for the request
@param body The body object to be sent together with the request
@param parameters A collection of query parameters to be added to the request URL
@param headers Additional HTTP-headers to be added to the request

@returns A generic reply object for `DT` and `ET`, to handle the reply to this request
@throw QJsonSerializationException Will be thrown, if the `body` cannot be serializer to JSON

A wrapper that calls `call(RestClass::PatchVerb, ...)`. It's a shortcut for PATCH-requests. Check
the documentation fo call for more details.

@sa RestClass::call(QByteArray, const QString &, const QVariantHash &, const HeaderHash &)
*/

/*!
@fn QtRestClient::RestClass::builder

@returns A request builder, prepared with all the settings of the parent rest client and this class

This builder simply adds the classes path to the builder of it's client.

If you need to set additional properties on the builder, that are not provided by the rest client
you use , you can override this function. To preserve all the properties override as follows:

@code{.cpp}
RequestBuilder MyClass::builder() const override {
	return RestClass::builder()
		.set...
}
@endcode

@sa RestClient::builder
*/

/*!
@fn QtRestClient::RestClass::concatParams()

@tparam args Variadic template arguments to allow any number of parameters
@param key The parameter name
@param value The parameters value
@param parameters additional parameters in the same style (optional)
@returns All parameters concatenated into a hash

Instead of using this function, you can use the #CONCAT_PARAMS macro. It's a simple shortcut
for this method. You can use it as follows:

@code{.cpp}
//using the macro
auto myParams = CONCAT_PARAMS("p1", 42, "p2", "myStuff")

//equivalent to
QVariantHash myParams2 = {
	{"p1", 42},
	{"p2", "myStuff"}
}
@endcode
*/
