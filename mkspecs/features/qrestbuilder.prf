qtPrepareTool(QMAKE_QRESTBUILDER, qrestbuilder)

isEmpty(QRESTBUILDER_DIR):QRESTBUILDER_DIR = .

debug_and_release {
    CONFIG(debug, debug|release):SUFFIX = /debug
    CONFIG(release, debug|release):SUFFIX = /release
}

QRESTBUILDER_DIR = $$QRESTBUILDER_DIR$$SUFFIX

{
qrestbuilder.name = QRESTBUILDER ${QMAKE_FILE_IN}.h
qrestbuilder.input = REST_API_DEFINITONS
qrestbuilder.variable_out = QRESTBUILDER_HEADERS
qrestbuilder.commands = $$QMAKE_QRESTBUILDER --in ${QMAKE_FILE_IN} --header ${QMAKE_FILE_OUT} --impl $$QRESTBUILDER_DIR/${QMAKE_FILE_BASE}$${first(QMAKE_EXT_CPP)}
qrestbuilder.output = $$QRESTBUILDER_DIR/${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
qrestbuilder.CONFIG += target_predeps
qrestbuilder.depends += $$QMAKE_QRESTBUILDER_EXE

QMAKE_EXTRA_COMPILERS += qrestbuilder

#qrestbuilder_sm.name = QRESTBUILDER ${QMAKE_FILE_IN}.cpp
#qrestbuilder_sm.input = QRESTBUILDER_HEADERS
#qrestbuilder_sm.variable_out = GENERATED_SOURCES
#qrestbuilder_sm.commands = $$escape_expand(\\n) # force creation of rule
#qrestbuilder_sm.output = $$QRESTBUILDER_DIR/${QMAKE_FILE_BASE}$${first(QMAKE_EXT_CPP)}
#qrestbuilder_sm.CONFIG += target_predeps

#QMAKE_EXTRA_COMPILERS += qrestbuilder_sm
}

!isEmpty(REST_API_DEFINITONS) {
    INCLUDEPATH += $$absolute_path($$QRESTBUILDER_DIR, $$OUT_PWD)
}

QMAKE_DIR_REPLACE += QRESTBUILDER_DIR
QMAKE_DIR_REPLACE_SANE += QRESTBUILDER_DIR
